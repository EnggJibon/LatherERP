@{
    ViewBag.Title = "Store Transfer Receive";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">

    <div class="FormHeader">
        <fieldset id="FormHeaderFieldSet">

            <div id="FormTitlePannel" class="col-lg-4">
                <div id="FormTitle" style="font-size:larger; font-weight:bold;">@ViewBag.formTiltle</div>
            </div>
            <div id="MessageText" class="col-lg-6">

            </div>
            <div id="ButtonPanel" class="col-lg-2">
                <input type="button" id="btnReset" class="Button" value="Reset" style="position:absolute; right:20px;" />
                <input type="button" id="btnDelete" class="Button" value="Delete" style="position:absolute; right:75px;" />
                <input type="button" id="btnSearch" class="Button" value="Search" style="position:absolute; right:135px;" />
                <input type="button" id="btnSave" class="Button" value="Save" onclick="Save()" style="position:absolute; right:200px;" />
            </div>
        </fieldset>
    </div>

</div>

<div class="row">
    <div class="FormBody">
        <div class="row">
            <div class="col-lg-2">
                <label>Transaction Of</label>
            </div>
            <div class="col-lg-4">
                <input type="text" id="" readonly="readonly" value="Store Transafer Receive" class="ReadOnlyTextbox" name="" tabindex="" style="width:200px;" />
            </div>



            <div class="col-lg-2">
                <label>Transaction No.</label>
            </div>
            <div class="col-lg-4">
                <input type="text" id="TransactionNo" readonly="readonly" class="txtBox ReadOnlyTextbox" name="" tabindex="" style="width:200px;" />
                <input type="hidden" id="TransactionID" class="txtBox" />
            </div>
        </div>
        <div class="row">
            <div class="col-lg-2">
                <label>Issue No</label>
            </div>
            <div class="col-lg-4">
                <input type="text" id="RefTransactionNo" readonly="readonly" class="txtBox ReadOnlyTextbox" name="" tabindex="" style="width:200px;" placeholder="Press F9" />
                <input type="hidden" id="RefTransactionID" class="txtBox" />
            </div>


            <div class="col-lg-2">
                <label>Transaction Date</label>
            </div>
            <div class="col-lg-4">
                <input type="text" id="TransactionDate" class="datePicker" name="" tabindex="" style="width:200px; margin-left:2px;" />
            </div>
        </div>

        <div class="row">
            <div class="col-lg-2">
                <label>Issue From</label>
            </div>
            <div class="col-lg-4">
                @Html.DropDownList("IssueFrom", new SelectList(ViewBag.RequisitionTo, "StoreID", "StoreName"), "--Select--", new { @class = "txtBox Dropdown RequiredTextBox", @style = "width: 200px; margin-left: 0px;" })
            </div>



            <div class="col-lg-2">
                <label>Remarks</label>
            </div>
            <div class="col-lg-4">
                <input type="text" id="Remark" class="txtBox" name="" tabindex="" style="width:200px; margin-left:2px;" />

            </div>
        </div>

        <div class="row">
            <div class="col-lg-2">
                <label>Receive At</label>
            </div>
            <div class="col-lg-4">
                @Html.DropDownList("IssueTo", new SelectList(ViewBag.RequisitionTo, "StoreID", "StoreName"), "--Select--", new { @class = "txtBox Dropdown RequiredTextBox", @style = "width: 200px; margin-left: 0px;" })
            </div>

            <div class="col-lg-2">
                
            </div>
            <div class="col-lg-4">

            </div>
        </div>
    </div>

    <div class="FormBody">
        <div id="StoreTransferReceiveGrid"></div>
    </div>

    <div class="FormBody">
        <div class="row">
            <div class="col-lg-2">
                <label>Check Note</label>
            </div>
            <div class="col-lg-4">
                <textarea id="ApprovalAdviceNote" class="txtBox" name="" tabindex=""></textarea>
                @*<input type="button" id="btnCheck" value="Check" />*@
                <input type="button" id="btnConfirm" value="Confirm" />
            </div>
        </div>
    </div>

</div>

<div id="ChemicalItemWindow" style="display: none;">
    <div id="ChemicalItemWindowGrid" class="PopUpGrid">
    </div>
    <input type="button" id="btnChemicalItemWindowCancel" class="PopUpButton" value="Cancel" />
    <input type="button" id="btnChemicalItemWindowOK" class="PopUpButton" value="OK" />
</div>

<div id="SupplierWindow" style="display: none;">
    <div id="SupplierWindowGrid" class="PopUpGrid">
    </div>
    <input type="button" id="btnSupplierWindowCancel" class="PopUpButton" value="Cancel" />
    <input type="button" id="btnSupplierWindowOK" class="PopUpButton" value="OK" />
</div>

<div id="GradeWindow" style="display: none;">
    <div id="GradeWindowGrid" class="PopUpGrid">
    </div>
    <input type="button" id="btnGradeWindowCancel" class="PopUpButton" value="Cancel" />
    <input type="button" id="btnGradeWindowOK" class="PopUpButton" value="OK" />
</div>

<div id="IssuedItemWindow" style="display: none;">
    <div id="IssuedItemWindowGrid" class="PopUpGrid">
    </div>
    <input type="button" id="btnIssuedItemWindowCancel" class="PopUpButton" value="Cancel" />
    <input type="button" id="btnIssuedItemWindowOK" class="PopUpButton" value="OK" />
</div>

<div id="SearchWindow" style="display: none;">
    <div id="SearchWindowGrid" class="PopUpGrid">
    </div>
    <input type="button" id="btnSearchWindowCancel" class="PopUpButton" value="Cancel" />
    <input type="button" id="btnSearchWindowOK" class="PopUpButton" value="OK" />

</div>

<div id="SaveChangeWindow" style="display: none;">
    <p><h5>Data will be lost if you continue.</h5></p>
    <input type="button" class="ThreeButtonWindow" id="btnSaveChangeWindowOk" value="OK" />
    <input type="button" class="ThreeButtonWindow" id="btnSaveChangeWindowCancel" value="Cancel" />
</div>

<div id="DeleteConfirmWindow" style="display: none;">
    <p><h5>Are you sure to delete?</h5></p>
    <input type="button" style="height: 25px; width: 60px; margin-left: 10px; float: left;" id="btnConfirmationOK" value="OK" />
    <input type="button" style="height: 25px; width: 60px; margin-left: 30px; float: left;" id="btnConfirmationCancel" value="Cancel" />
</div>

<div id="divLoading" style="margin: 0px; padding: 0px; position: fixed; right: 0px;
    top: 0px; width: 100%; height: 100%; background-color: #666666; z-index: 30001;
    opacity: .8; filter: alpha(opacity=70);display:none">
    <p style="position: absolute; top: 50%; left: 42%; color: White;">
        Please wait... <img src="../../images/ajax-loading.gif">
    </p>
</div>

<script type="text/javascript">
    //var ItemGridchangeStatus = 0;
    var changeStatus = 0; // any change textbox/Dropdown/Grid
    var resetEditStatus = 0;
    var dataitem = {};
    var PageStatus = "";

    $(document).ready(function () {

        //--------------------------------------Start of Defining Datasource & Dropdown-----------------------------------------------------------------
        var ddlSizeDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "SizeID",
                    fields: {
                        SizeID: { editable: false },
                        SizeName: { editable: false }
                    }
                }
            },
            pageSize: 100,
            transport: {
                read: {
                    url: '@Url.Action("GetAllPackSizeForChemical", "ChemicalForeignPurchaseOrder")',
                    type: "GET",
                    dataType: "JSON"
                }
            }
        });

        function ddlSize(container, options) {
            $('<input name="SizeID" data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        dataTextField: "SizeName",
                        dataValueField: "SizeName",
                        optionLabel: "Select",
                        autoBind: false,
                        change: function (e) {
                            ItemGridchangeStatus = 1;
                            changeStatus = 1;
                            checkUnsavedData = 1;
                        },
                        dataSource: ddlSizeDataSource
                    });
        };

        var ddlUnitForChemicalPackSizeDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "UnitID",
                    fields: {
                        UnitID: { editable: false },
                        UnitName: { editable: false }
                    }
                }
            },
            pageSize: 100,
            transport: {
                read: {
                    url: '@Url.Action("GetAllUnitForChemicalPackSize", "ChemicalForeignPurchaseOrder")',
                    type: "GET",
                    dataType: "JSON"
                }
            }
        });

        function ddlUnitForChemicalPackSize(container, options) {
            $('<input name="UnitID" data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        dataTextField: "UnitName",
                        dataValueField: "UnitName",
                        optionLabel: "Select",
                        autoBind: false,
                        scrolling: false,
                        change: function (e) {
                            ItemGridchangeStatus = 1;
                            changeStatus = 1;
                            checkUnsavedData = 1;
                        },
                        dataSource: ddlUnitForChemicalPackSizeDataSource
                    });
        };


        var ddlUnitForChemicalDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "UnitID",
                    fields: {
                        UnitID: { editable: false },
                        UnitName: { editable: false }
                    }
                }
            },
            pageSize: 100,
            transport: {
                read: {
                    url: '@Url.Action("GetAllUnitForChemical", "ChemicalForeignPurchaseOrder")',
                    type: "GET",
                    dataType: "JSON"
                }
            }
        });

        function ddlUnitForChemical(container, options) {
            $('<input name="UnitID" data-bind="value:' + options.field + '"/>')
                    .appendTo(container)
                    .kendoDropDownList({
                        dataTextField: "UnitName",
                        dataValueField: "UnitName",
                        optionLabel: "Select",
                        autoBind: false,
                        scrolling: false,
                        change: function (e) {
                            ItemGridchangeStatus = 1;
                            changeStatus = 1;
                            checkUnsavedData = 1;
                        },
                        dataSource: ddlUnitForChemicalDataSource
                    });
        };
        //--------------------------------------End of Defining Datasource & Dropdown-----------------------------------------------------------------

        //--------------------------------------Start of defining Datagrid----------------------------------------------------------------

        var StoreTransferReceiveGridDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "TransItemID",
                    fields: {
                        TransItemID: { editable: false },
                        ItemID: { editable: true },
                        ItemName: { editable: true, defaultValue: 'Press F9' },
                        SupplierID: { editable: true },
                        SupplierName: { editable: true, defaultValue: 'Press F9' },

                        IssuePackSize: { editable: false },
                        IssuePackSizeName: { editable: false },
                        IssueSizeUnit: { editable: false },
                        IssueSizeUnitName: { editable: false },
                        IssuePackQty: { editable: false, type: "number", validation: { required: false, min: 0, max: 999999999999 } },
                        IssueQty: { editable: false, type: "number", validation: { required: false, min: 0, max: 999999999999 } },
                        IssueUnit: { editable: false },
                        IssueUnitName: { editable: false },

                        PackSize: { editable: true },
                        PackSizeName: { editable: true },
                        SizeUnit: { editable: true },
                        SizeUnitName: { editable: true },
                        PackQty: { editable: true, type: "number", validation: { required: false, min: 0, max: 999999999999 } },
                        ReceiveQty: { editable: true, type: "number", validation: { required: false, min: 0, max: 999999999999 } },
                        ReceiveUnit: { editable: true },
                        ReceiveUnitName: { editable: true, defaultValue: 'KG' }
                    }
                }
            },
            pageSize: 100
        });

        var StoreTransferReceiveGrid = $("#StoreTransferReceiveGrid").kendoGrid({
            dataSource: StoreTransferReceiveGridDataSource,
            pageable: true,
            editable: true,
            edit: function (e) {

                $(".CalculationNeeded").unbind().change(function () {
                    var grid = $("#StoreTransferReceiveGrid").data("kendoGrid");
                    var row = $(this).closest("tr");
                    e.model.set("ReceiveQty", (grid.dataItem(row).PackSizeName * grid.dataItem(row).PackQty));
                });

                var ddl = e.container.find('[data-role=dropdownlist]').data('kendoDropDownList');
                if (ddl) {
                    ddl.open();
                }
            },
            selectable: "row",
            navigatable: true,
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Starts with",
                        contains: "Contains"
                    }
                }
            },
            groupable: true,
            sortable: false,
            height: 300,
            toolbar: [{
                text: "Add New Item",
                className: "btnStoreTransferReceiveGrid",
                imageClass: "k-icon k-add"
            }],
            columns: [
                      { field: "ItemName", title: "Item Name", width: "60px", attributes: { "class": "ChemicalItemName" } },
                      { field: "SupplierName", title: "Supplier", width: "60px", attributes: { "class": "SupplierName" } },

                      { field: "IssuePackSizeName", title: "Issue Pack Size", filterable:false, width: "60px", editor: ddlSize, attributes: { style: "background-color: silver" } },
                      { field: "IssueSizeUnitName", title: "Issue Size Unit", filterable:false, width: "60px", editor: ddlUnitForChemicalPackSize, attributes: { style: "background-color: silver" } },
                      { field: "IssuePackQty", format: "{0:n2}", title: "Issue Pack Qty", filterable:false, width: "60px", attributes: { style: "background-color: silver" } },
                      { field: "IssueQty", format: "{0:n2}", title: "Issue Qty", width: "60px", filterable:false, attributes: { style: "background-color: silver" } },
                      { field: "IssueUnitName", title: "Issue Unit", width: "60px", filterable:false, editor: ddlUnitForChemical, attributes: { style: "background-color: silver" } },

                      { field: "PackSizeName", filterable: false, title: "Receive Pack Size<span style='color:red'>*</span>", width: "60px", editor: ddlSize, attributes: { "class": "CalculationNeeded" } },
                      { field: "SizeUnitName", filterable: false, title: "Receive Size Unit<span style='color:red'>*</span>", width: "60px", editor: ddlUnitForChemicalPackSize },
                      { field: "PackQty", filterable: false, format: "{0:n2}", title: "Receive Pack Qty<span style='color:red'>*</span>", attributes: { "class": "CalculationNeeded" }, width: "60px" },
                      { field: "ReceiveQty", filterable: false, format: "{0:n2}", title: "Receive Qty<span style='color:red'>*</span>", width: "60px" },
                      { field: "ReceiveUnitName", filterable: false, title: "Receive Unit<span style='color:red'>*</span>", width: "60px", editor: ddlUnitForChemical },

                      { command: [{ name: "DeltedRow", text: "Delete", click: DeleteItem }], title: "Action", width: 70 }
            ]
        }).data('kendoGrid');

        var IssuedItemGridDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "TransactionID",
                    fields: {
                        TransactionID: { editable: false },
                        TransactionNo: { editable: false },
                        TransactionDate: { editable: false },
                        TransactionFrom: { editable: false },
                        TransactionTo: { editable: false },
                        RecordStatus: { editable: false }

                    }
                }
            },
            pageSize: 100,
            transport: {
                read: {
                    url: '@Url.Action("GetIssuedItemForLOV", "StoreTransferReceive")',
                    type: "GET",
                    dataType: "JSON"
                }
            }
        });

        var IssuedGrid = $("#IssuedItemWindowGrid").kendoGrid({
            dataSource: IssuedItemGridDataSource,
            pageable: true,
            groupable: true,
            editable: true,
            selectable: "row",
            navigatable: true,
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Starts with",
                        contains: "Contains"
                    }
                }
            },
            groupable: true,
            sortable: true,
            height: 320,
            autoBind: false,
            columns: [
                  { field: "TransactionNo", title: "Transaction No", width: "60px" },
                  { field: "TransactionDate", title: "Transaction Date", width: "60px" },
                  { field: "TransactionFrom", title: "Issued From", width: "80px" },
                  { field: "TransactionTo", title: "Issued To", width: "60px" },
                  //{ field: "RecordStatus", title: "Record Status", width: "60px" }
            ]
        });


        var SearchGridDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "TransactionID",
                    fields: {
                        TransactionID: { editable: false },
                        TransactionNo: { editable: false },
                        TransactionDate: { editable: false },
                        TransactionFrom: { editable: false },
                        TransactionTo: { editable: false },
                        RecordStatus: { editable: false }

                    }
                }
            },
            pageSize: 100,
            transport: {
                read: {
                    url: '@Url.Action("GetTransactionInfoForSearch", "StoreTransferReceive")',
                    type: "GET",
                    dataType: "JSON"
                }
            }
        });

        var SearchGrid = $("#SearchWindowGrid").kendoGrid({
            dataSource: SearchGridDataSource,
            pageable: true,
            groupable: true,
            editable: true,
            selectable: "row",
            navigatable: true,
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Starts with",
                        contains: "Contains"
                    }
                }
            },
            groupable: true,
            sortable: true,
            height: 320,
            columns: [
                  { field: "TransactionNo", title: "Transaction No", width: "60px" },
                  { field: "TransactionDate", title: "Transaction Date", width: "60px" },
                  { field: "TransactionFrom", title: "Transaction From", width: "80px" },
                  { field: "TransactionTo", title: "Transaction To", width: "60px" },
                  { field: "RecordStatus", title: "Record Status", width: "60px" }
            ]
        });

        var ChemicalItemDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "ItemID",
                    fields: {
                        ItemID: { editable: false },
                        ItemName: { editable: false },
                        ItemCategory: { editable: false },
                        ItemTypeID: { editable: false },
                        ItemTypeName: { editable: false }
                    }
                }
            },
            transport: {
                read: {
                    url: '@Url.Action("GetAllChemicalItem", "ChemicalForeignPurchaseOrder")',
                    type: "GET",
                    dataType: "JSON"
                }
            },
            pageSize: 100

        });

        var ChemicalItemGrid = $("#ChemicalItemWindowGrid").kendoGrid({
            dataSource: ChemicalItemDataSource,
            pageable: true,
            editable: true,
            selectable: "row",
            navigatable: true,
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Starts with",
                        contains: "Contains"
                    }
                }
            },
            groupable: true,
            sortable: true,
            height: 300,
            columns: [
                  { field: "ItemName", title: "Item Name", width: "60px" },
                  { field: "ItemCategory", title: "Item Category", width: "60px" },
                  { field: "ItemTypeName", title: "Item Type", width: "60px" }

            ]

        });


        var SupplierDataSource = new kendo.data.DataSource({
            schema: {
                model: {
                    id: "SupplierID",
                    fields: {
                        SupplierID: { editable: false },
                        SupplierCode: { editable: false },
                        SupplierName: { editable: false }
                    }
                }
            },
            transport: {
                read: {
                    url: '@Url.Action("GetSupplierForChemical", "StoreTransferReceive")',
                    type: "GET",
                    dataType: "JSON"
                }
            },
            pageSize: 100

        });

        var SupplierGrid = $("#SupplierWindowGrid").kendoGrid({
            dataSource: SupplierDataSource,
            pageable: true,
            editable: true,
            selectable: "row",
            navigatable: true,
            filterable: {
                extra: false,
                operators: {
                    string: {
                        startswith: "Starts with",
                        contains: "Contains"
                    }
                }
            },
            groupable: true,
            sortable: true,
            height: 300,
            columns: [
                  { field: "SupplierCode", title: "Supplier Code", width: "60px" },
                  { field: "SupplierName", title: "Supplier Name", width: "60px" }
            ]

        });

        //--------------------------------------End of defining Datagrid----------------------------------------------------------------


        //----------------------------------------To open all the pop up windows--------------------------------------------------------------------

        $(document).on('keyup', '.ChemicalItemName', function (e) {
            if (e.which == 120) {
                SelectedItemOfListOfValue('ChemicalItemWindowGrid');
                ChemicalItemWindow.open(); //Open Popup
                ChemicalItemWindow.center();
            }

        });

        $(document).on('keyup', '.SupplierName', function (e) {
            if (e.which == 120) {
                SelectedItemOfListOfValue('SupplierWindowGrid');
                SupplierWindow.open(); //Open Popup
                SupplierWindow.center();
            }

        });

        @*function GetRecipeForFixedCategory() {
            $.ajax({
                url: '@Url.Action("GetRecipeForFixedCategory", "ProductionRequisition")',
                type: 'GET',
                data: { "_RecipeFor": $("#RecipeFor").val() },
                success: function (response) {

                    $("#RecipeWindowGrid").data('kendoGrid').dataSource.data(response);
                } //End of success call
            });
        }*@


        $(document.body).keyup(function (e) {

            if ($("#RefTransactionNo").is(":focus")) {
                if (e.which == 120) {
                    SelectedItemOfListOfValue('IssuedItemWindowGrid');
                    IssuedItemWindow.open();
                    IssuedItemWindow.center();
                }
            }


        });

        //----------------------------------------End of opening all the pop up windows--------------------------------------------------------------------

        //---------------------------------------------Start of defining popup Window-----------------------------------------------

        var SearchWindow = $('#SearchWindow').kendoWindow({
            actions: ["Minimize", "Maximize", "Close"],
            visible: false,
            width: "auto",
            height: "auto",
            title: "Received Chemical",
            position: { top: 5, left: 5 },
            modal: true,
            draggable: true
        }).data('kendoWindow');


        var ChemicalItemWindow = $('#ChemicalItemWindow').kendoWindow({
            actions: ["Minimize", "Maximize", "Close"],
            visible: false,
            width: "700px",
            height: "auto",
            title: "List Of Chemical",
            position: { top: 5, left: 5 },
            modal: true,
            draggable: true
        }).data('kendoWindow');

        var SupplierWindow = $('#SupplierWindow').kendoWindow({
            actions: ["Minimize", "Maximize", "Close"],
            visible: false,
            width: "700px",
            height: "auto",
            title: "List Of Supplier",
            position: { top: 5, left: 5 },
            modal: true,
            draggable: true
        }).data('kendoWindow');

        var IssuedItemWindow = $('#IssuedItemWindow').kendoWindow({
            actions: ["Minimize", "Maximize", "Close"],
            visible: false,
            width: "auto",
            height: "auto",
            title: "Issued Item List",
            position: { top: 5, left: 5 },
            modal: true,
            draggable: true
        }).data('kendoWindow');

        //---------------------------------------------End of defining popup Window-----------------------------------------------


        //-------------------------------------------------Common Function--------------------------------------------------------

        //To select the first row as default & to clear the filter while loading the grid
        function SelectedItemOfListOfValue(GridName) {
            var grid = $('#' + GridName).data("kendoGrid");
            //Reload Grid
            grid.dataSource.read();
            //Clear Filter
            $('#' + GridName).data("kendoGrid").dataSource.filter([]);
            //Select First Row
            $('#' + GridName).data().kendoGrid.bind('dataBound', function (e) {
                this.element.find('tbody tr:first').addClass('k-state-selected');
            });
        }

        //To Bring Data from List of Value Grid to Main Page
        function ListOfValueGridEvent(GridName) {
            var grid = $('#' + GridName).data("kendoGrid");
            var selectedItem = (grid.dataItem(grid.select())); //Selected Row
            changeStatus = 1;
            $.each(selectedItem, function (key, value) {
                if (value != null && value != 0)
                    $('#' + key).val(value);
            });
        }



        ClearOperationalMessage();
        ClearRequiredTextBoxRedColor();
        CheckUnSavedOnlyMasterData();


        // create DatePicker from input HTML element
        $(".datePicker").kendoDatePicker({
            format: "dd/MM/yyyy",
            value: new Date(),
            max: new Date()
        });

        // Display Date into kendo Grid Row
        function dateTimeEditor(container, options) {
            $('<input data-text-field="' + options.field + '" data-value-field="' + options.field + '" data-bind="value:' + options.field + '" data-format="' + options.format + '"/>')
                    .appendTo(container)
                    .kendoDatePicker({
                        value: new Date(),
                        max: new Date()
                        //change: function () {
                        //    alert("test");
                        //}
                    });
        }

        $("#StoreTransferReceiveGrid").on('input', function () {
            changeStatus = 1;
        });


        //-------------------------------------------------Common Function--------------------------------------------------------



        //-----------------------------------------------Handling all the pop up window events------------------------------------------

        //To bring data from search window to main page
        function SearchWindowEvents() {
            var grid = $("#SearchWindowGrid").data("kendoGrid");
            var selectedItem = (grid.dataItem(grid.select())); //Selected Row

            $.ajax({
                url: '@Url.Action("GetTransactionDetailsAfterSearch", "StoreTransferReceive")',
                data: ({ "_TransactionID": selectedItem.TransactionID }),
                type: 'GET',
                contentType: 'application/json;',
                dataType: 'json',
                success: function (response) {
                    //ResetData();
                    if (response.TransactionInfo != null) {
                        $.each(response.TransactionInfo, function (key, value) {
                            //if (value != null && value != 0)
                            $('#' + key).val(value);
                        });
                    }
                    //SelectedItemOfListOfValue('ChallanGrid');
                    $("#StoreTransferReceiveGrid").data("kendoGrid").dataSource.data(response.TransactionItemList);

                    PageStatus = response.TransactionInfo.RecordStatus;
                    CheckRecordStatusForButton(PageStatus);
                    changeStatus = 0;
                }
            });
        }

        $('#btnSearchWindowOK').click(function () {
            SearchWindowEvents();
            SearchWindow.close();
        });
        $('#btnSearchWindowCancel').click(function () {
            SearchWindow.close();
        });
        $("#SearchWindow").dblclick(function () {
            SearchWindowEvents();
            SearchWindow.close();
        });
        $("#SearchWindow").keyup(function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                SearchWindowEvents();
                SearchWindow.close();
            }
                // Close Window with escape key
            else if (keycode == '27') {
                SearchWindow.close();
            }
            event.stopPropagation();
        });

        //Handling button click for Location window grid
        function IssuedItemWindowEvent() {
            var WindowGrid = $("#IssuedItemWindowGrid").data("kendoGrid");
            var WindowGridRow = WindowGrid.select();
            var WindowGridItem = WindowGrid.dataItem(WindowGridRow);

            //var dataRows = PageGrid.items();
            //var rowIndex = dataRows.index(PageGrid.select());

            $("#RefTransactionNo").val(WindowGridItem.TransactionNo);
            $("#RefTransactionID").val(WindowGridItem.TransactionID);


            $.ajax({
                url: '@Url.Action("GetIssuedItemDetailsAfterLOV", "StoreTransferReceive")',
                data: ({ "_TransactionID": WindowGridItem.TransactionID }),
                type: 'GET',
                contentType: 'application/json;',
                dataType: 'json',
                beforeSend: function () {
                    $("#divLoading").show();
                },
                complete: function () {
                    $("#divLoading").hide();
                },
                success: function (response) {
                    //ResetData();
                    if (response.TransactionInfo != null) {
                        $.each(response.TransactionInfo, function (key, value) {
                            if (value != null && value != 0)
                                $('#' + key).val(value);
                        });
                    }
                    //SelectedItemOfListOfValue('ChallanGrid');
                    $("#StoreTransferReceiveGrid").data("kendoGrid").dataSource.data(response.TransactionItemList);
                    MakeStoreTransferReceiveGridNonEditable();
                }
            });


            changeStatus = 1;


            //PageGrid.editCell($("#RequisitionGrid tr:eq(" + (rowIndex + 1) + ") td:eq(1)"));

            //$("#RequisitionGrid tr:eq(" + (rowIndex + 1) + ")").addClass('k-state-selected');
            //if (rowIndex > 0)
            //    $("#RequisitionGrid tr:eq(1)").removeClass('k-state-selected');


        };

        $('#btnIssuedItemWindowOK').click(function () {
            IssuedItemWindowEvent();
            IssuedItemWindow.close();
        });
        $('#btnIssuedItemWindowCancel').click(function () {
            IssuedItemWindow.close();
        });
        $("#IssuedItemWindow").dblclick(function () {
            IssuedItemWindowEvent();
            IssuedItemWindow.close();
        });
        $("#IssuedItemWindow").keyup(function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                IssuedItemWindowEvent();
                IssuedItemWindow.close();
            }
                // Close Window with escape key
            else if (keycode == '27') {
                IssuedItemWindow.close();
            }
            event.stopPropagation();
        });


        function ChemicalItemWindowEvent() {
            var WindowGrid = $("#ChemicalItemWindowGrid").data("kendoGrid");
            var WindowGridRow = WindowGrid.select();
            var WindowGridItem = WindowGrid.dataItem(WindowGridRow);

            var PageGrid = $("#StoreTransferReceiveGrid").data("kendoGrid");
            var PageGridItem = PageGrid.dataItem(PageGrid.select());


            //var dataRows = PageGrid.items();
            //var rowIndex = dataRows.index(PageGrid.select());


            PageGridItem.set("ItemID", WindowGridItem.ItemID);
            PageGridItem.set("ItemName", WindowGridItem.ItemName);
            //PageGrid.editCell($("#RecipeItemGrid tr:eq(" + (rowIndex + 1) + ") td:eq(7)"));
            changeStatus = 1;
            checkUnsavedData = 1;

            //$("#RecipeItem tr:eq(" + (rowIndex + 1) + ")").addClass('k-state-selected');
            //if (rowIndex > 0)
            //    $("#RecipeItem tr:eq(1)").removeClass('k-state-selected');
        };
        $('#btnChemicalItemWindowOK').click(function () {
            ChemicalItemWindowEvent();
            ChemicalItemWindow.close();
        });
        $('#btnChemicalItemWindowCancel').click(function () {
            ChemicalItemWindow.close();
        });
        $("#ChemicalItemWindow").dblclick(function () {
            ChemicalItemWindowEvent();
            ChemicalItemWindow.close();
        });
        $("#ChemicalItemWindow").keyup(function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                ChemicalItemWindowEvent();
                ChemicalItemWindow.close();
            }
                // Close Window with escape key
            else if (keycode == '27') {
                ChemicalItemWindow.close();
            }
            event.stopPropagation();
        });


        function SupplierWindowEvent() {
            var WindowGrid = $("#SupplierWindowGrid").data("kendoGrid");
            var WindowGridRow = WindowGrid.select();
            var WindowGridItem = WindowGrid.dataItem(WindowGridRow);

            var PageGrid = $("#StoreTransferReceiveGrid").data("kendoGrid");
            var PageGridItem = PageGrid.dataItem(PageGrid.select());


            //var dataRows = PageGrid.items();
            //var rowIndex = dataRows.index(PageGrid.select());


            PageGridItem.set("SupplierID", WindowGridItem.SupplierID);
            PageGridItem.set("SupplierName", WindowGridItem.SupplierName);
            //PageGrid.editCell($("#RecipeItemGrid tr:eq(" + (rowIndex + 1) + ") td:eq(7)"));
            changeStatus = 1;
            checkUnsavedData = 1;

            //$("#RecipeItem tr:eq(" + (rowIndex + 1) + ")").addClass('k-state-selected');
            //if (rowIndex > 0)
            //    $("#RecipeItem tr:eq(1)").removeClass('k-state-selected');
        };
        $('#btnSupplierWindowOK').click(function () {
            SupplierWindowEvent();
            SupplierWindow.close();
        });
        $('#btnSupplierWindowCancel').click(function () {
            SupplierWindow.close();
        });
        $("#SupplierWindow").dblclick(function () {
            SupplierWindowEvent();
            SupplierWindow.close();
        });
        $("#SupplierWindow").keyup(function (event) {
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if (keycode == '13') {
                SupplierWindowEvent();
                SupplierWindow.close();
            }
                // Close Window with escape key
            else if (keycode == '27') {
                SupplierWindow.close();
            }
            event.stopPropagation();
        });

        //-----------------------------------------------End of Handling all the pop up window events------------------------------------------

        //------------------------------------Start of Handling of all the button event----------------------------------------

        $("#btnReset").click(function () {
            resetEditStatus = 1; // 1 for reset

            if (changeStatus == 0) {
                PageStatus = "NCF";
                CheckRecordStatusForButton(PageStatus);
                ClearOperationalMessage();
                ResetOnlyMasterPageData();
                $(".RequiredTextBox").css("border-color", "white");
                $("#StoreTransferReceiveGrid").data('kendoGrid').dataSource.data([]);
            }
            else {
                OpenSaveChangesDialog(); // Probelm opening window!
            }
        });

        $("#btnSearch").click(function () {
            resetEditStatus = 2; // 2 for Search

            if (changeStatus == 0) {
                SelectedItemOfListOfValue('SearchWindowGrid');
                SearchWindow.open();
            }
            else {
                OpenSaveChangesDialog(); // Probelm opening window!
            }
        });

        $("#btnSaveChangeWindowOk").click(function () {
            if (resetEditStatus == 1) //For reset
            {
                ResetOnlyMasterPageData();
                $("#StoreTransferReceiveGrid").data('kendoGrid').dataSource.data([]);
                CloseSaveChangesDialog();
                changeStatus = 0;
            }
            else if (resetEditStatus == 2) // For Search
            {
                CloseSaveChangesDialog();
                SelectedItemOfListOfValue('SearchWindowGrid');
                SearchWindow.open();
            }
            else if (resetEditStatus == 3) // For Requisition Item Delete from Grid
            {
                DeleteFrom = 1;
                CloseSaveChangesDialog();
                OpenConfirmationDialog();
            }

            else if (resetEditStatus == 5) // For Requisition Delete
            {
                DeleteFrom = 3;
                CloseSaveChangesDialog();
                OpenConfirmationDialog();
            }
        });

        $("#btnSaveChangeWindowCancel").click(function () {
            CloseSaveChangesDialog();
        });

        @*$("#btnCheck").click(function () {

            $.ajax({
                url: '@Url.Action("CheckStoreTranserIssueTransaction", "StoreTransferIssue")',
                type: 'GET',
                data: { "_TransactionID": $("#TransactionID").val(), "_CheckComment": $("#CheckComment").val() },
                beforeSend: function () {
                    $("#divLoading").show();
                },
                complete: function () {
                    $("#divLoading").hide();
                },
                success: function (response) {

                    if (response.Msg == "Success") {
                        //ResetOnlyMasterPageData();
                        $('#MessageText').html("Checked Successfully");
                        $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });

                        //$("#RecipeItemGrid").data('kendoGrid').dataSource.data([]);
                        changeStatus = 0;
                        PageStatus = "CHK";
                        CheckRecordStatusForButton(PageStatus);


                    } else if (response.Msg == "Fail") {
                        $('#MessageText').html("Confirmation Failed");
                        $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });

                        //$("#AdjustmentGrid").data('kendoGrid').dataSource.data([]);
                    }

                } //End of success call
            });
        });*@


        $("#btnConfirm").click(function () {

            $.ajax({
                url: '@Url.Action("ConfirmIssueToProductionTransaction", "StoreTransferReceive")',
                type: 'GET',
                data: { "_TransactionID": $("#TransactionID").val(), "_CheckComment": $("#CheckComment").val() },
                beforeSend: function () {
                    $("#divLoading").show();
                },
                complete: function () {
                    $("#divLoading").hide();
                },
                success: function (response) {

                    if (response.ReturnId == 1) {
                        //ResetOnlyMasterPageData();
                        $('#MessageText').html(response.Msg);
                        $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });

                        //$("#RecipeItemGrid").data('kendoGrid').dataSource.data([]);
                        changeStatus = 0;
                        PageStatus = "CNF";
                        CheckRecordStatusForButton(PageStatus);
                    } else if (response.ReturnId == 0) {
                        $('#MessageText').html(response.Msg);
                        $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });

                        //$("#AdjustmentGrid").data('kendoGrid').dataSource.data([]);
                    }

                } //End of success call
            });
        });

        //------------------------------------End of Handling of all the button event----------------------------------------



        //------------------------------To Add new row to any grid----------------------------------------------------

        function MakeStoreTransferReceiveGridEditable() {
            var grid = $("#StoreTransferReceiveGrid").data("kendoGrid");

            grid.dataSource.at(0).fields["ItemID"].editable = true;
            grid.dataSource.at(0).fields["ItemName"].editable = true;
            grid.dataSource.at(0).fields["SupplierID"].editable = true;
            grid.dataSource.at(0).fields["SupplierName"].editable = true;
        };

        function MakeStoreTransferReceiveGridNonEditable() {
            var grid = $("#StoreTransferReceiveGrid").data("kendoGrid");

            grid.dataSource.at(0).fields["ItemID"].editable = false;
            grid.dataSource.at(0).fields["ItemName"].editable = false;
            grid.dataSource.at(0).fields["SupplierID"].editable = false;
            grid.dataSource.at(0).fields["SupplierName"].editable = false;
        };




        $("#StoreTransferReceiveGrid").keyup(function (e) {

            if (e.keyCode == 13) {
                var grid = $("#StoreTransferReceiveGrid").data("kendoGrid");
                MakeStoreTransferReceiveGridEditable();
                $("#StoreTransferReceiveGrid").data().kendoGrid.bind('dataBound', function () {
                    this.element.find('tbody tr:first').addClass('k-state-selected');
                });
                grid.addRow();

            }
        });

        $(".btnStoreTransferReceiveGrid").click(function (e) {

            var grid = $("#StoreTransferReceiveGrid").data("kendoGrid");
            MakeStoreTransferReceiveGridEditable();
            $("#StoreTransferReceiveGrid").data().kendoGrid.bind('dataBound', function () {
                this.element.find('tbody tr:first').addClass('k-state-selected');
            });
            grid.addRow();
            e.preventDefault();


        });

        //------------------------------End of Adding new row to any grid----------------------------------------------------

        //--------------------------------Handling Delete Event-------------------------------------------------------------

        var DeleteFrom = 0;

        function DeleteItem(event) {
            if (changeStatus == 0) {
                DeleteFrom = 1;
                dataitem = StoreTransferReceiveGrid.dataItem($(event.currentTarget).closest("tr"));
                OpenConfirmationDialog();
            }
            else {
                dataitem = StoreTransferReceiveGrid.dataItem($(event.currentTarget).closest("tr"));
                resetEditStatus = 3;
                OpenSaveChangesDialog();
            }
        };

        $("#btnDelete").click(function () {
            if (changeStatus == 0) {
                DeleteFrom = 3;
                OpenConfirmationDialog();
            }
            else {
                resetEditStatus = 5;
                OpenSaveChangesDialog();
            }
        });


        //Handling Yes button click for grid row deletion
        $('#btnConfirmationOK').click(function () {
            if (DeleteFrom == 1) // Issue Item Delete
            {
                if (dataitem.TransItemID == 0) {
                    $("#StoreTransferReceiveGrid").data("kendoGrid").dataSource.remove(dataitem);
                    $('#MessageText').html("Delete Successful");
                    $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                }
                else {
                    $.ajax({
                        url: '@Url.Action("DeleteTransactionItem", "StoreTransferIssue")',
                        type: 'GET',
                        data: { "_TransItemID": dataitem.TransItemID, "_PageStatus": PageStatus },
                        beforeSend: function () {
                            $("#divLoading").show();
                        },
                        complete: function () {
                            $("#divLoading").hide();
                        },
                        success: function (response) {

                            if (response.Msg == "Success") {
                                $('#MessageText').html("Delete Successful");
                                $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                                $("#StoreTransferReceiveGrid").data("kendoGrid").dataSource.remove(dataitem);
                            }
                            else if (response.Msg == "Fail") {
                                $('#MessageText').html("Delete Failed");
                                $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                            }
                            else if (response.Msg == "CNF") {
                                $('#MessageText').html("Confirmed record can not be deleted.");
                                $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                            }

                        } //End of success call
                    });
                }
            }

            else if (DeleteFrom == 3) //Transaction Delete
            {
                var PageGridDataSource = $("#StoreTransferReceiveGrid").data("kendoGrid").dataSource;
                var PageGridData = PageGridDataSource.data();
                if (PageGridData.length > 0) {
                    $('#MessageText').html("Receive Item Found.");
                    $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                }
                else {
                    $.ajax({
                        url: '@Url.Action("DeleteTransaction", "StoreTransferIssue")',
                        type: 'GET',
                        data: { "_TransactionID": $("#TransactionID").val(), "_PageStatus": PageStatus },
                        beforeSend: function () {
                            $("#divLoading").show();
                        },
                        complete: function () {
                            $("#divLoading").hide();
                        },
                        success: function (response) {

                            if (response.Msg == "Success") {
                                ResetOnlyMasterPageData();
                                $('#MessageText').html("Delete Successful");
                                $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                            }
                            else if (response.Msg == "Fail") {
                                $('#MessageText').html("Delete Failed");
                                $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                            }
                            else if (response.Msg == "CNF") {
                                $('#MessageText').html("Confirmed record can not be deleted.");
                                $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                            }

                        } //End of success call
                    });
                }
            }
            CloseConfirmationDialog();
        });


        //Handling No button click for grid row deletion
        $('#btnConfirmationCancel').click(function () {
            dataitem = {};
            CloseConfirmationDialog();
        });
        //---------------------------------End of handling Delete Event-----------------------------------------------------


    });//End of Document.Ready()


    //-----------------------------------To Save Data------------------------------------------------------------------------------------

    var TransactionItemList = {
        "TransItemID": "", "TransactionID": "", "ItemID": "", "SupplierID": "", "IssuePackSizeName": "", "IssueSizeUnitName": "",
        "IssuePackQty": "", "IssueQty": "", "IssueUnitName": "", "PackSizeName": "", "SizeUnitName": "",
        "PackQty": "", "ReceiveQty": "", "ReceiveUnitName": ""
    };

    var FinalObject = {
        "TransactionID": "", "TransactionNo": "", "RefTransactionID": "", "RefTransactionNo": "", "TransactionDate": "", "Remark": "", "IssueFrom": "", "IssueTo": "", "TransactionItemList": []
    };
    var saveStatus = 1;
    function Save() {
        saveStatus = 1;
        CheckRequiredTextBoxMaxLength('RefTransactionNo', 50);
        CheckRequiredTextBoxMaxLength('IssueFrom', 50);
        CheckRequiredTextBoxMaxLength('IssueTo', 50);

        var StoreTransferReceiveGridDataSource = $("#StoreTransferReceiveGrid").data("kendoGrid").dataSource;
        var StoreTransferReceiveGridData = StoreTransferReceiveGridDataSource.data();


        for (var i = StoreTransferReceiveGridData.length - 1; i >= 0; i--) {
            if (StoreTransferReceiveGridData[i].ItemName == "" || StoreTransferReceiveGridData[i].SupplierID == "" || StoreTransferReceiveGridData[i].PackSizeName == "" ||
                StoreTransferReceiveGridData[i].SizeUnitName == "" || StoreTransferReceiveGridData[i].PackQty == "" || StoreTransferReceiveGridData[i].ReceiveQty == "" ||
                StoreTransferReceiveGridData[i].ReceiveUnitName == "") {
                saveStatus = 0;
                break;
            }
        }


        if (saveStatus == 1) {
            FinalObject.TransactionID = $("#TransactionID").val();
            FinalObject.TransactionNo = $("#TransactionNo").val();
            FinalObject.RefTransactionID = $("#RefTransactionID").val();
            FinalObject.RefTransactionNo = $("#RefTransactionNo").val();
            FinalObject.TransactionDate = $("#TransactionDate").val();
            FinalObject.Remark = $("#Remark").val();
            FinalObject.IssueFrom = $("#IssueFrom").val();
            FinalObject.IssueTo = $("#IssueTo").val();

            for (var i = StoreTransferReceiveGridData.length - 1; i >= 0; i--) {
                //if (PIGridData[i].dirty) {
                TransactionItemList.TransItemID = StoreTransferReceiveGridData[i].TransItemID;
                TransactionItemList.TransactionID = StoreTransferReceiveGridData[i].TransactionID;
                TransactionItemList.ItemID = StoreTransferReceiveGridData[i].ItemID;
                TransactionItemList.SupplierID = StoreTransferReceiveGridData[i].SupplierID;
                TransactionItemList.IssuePackSizeName = StoreTransferReceiveGridData[i].IssuePackSizeName;
                TransactionItemList.IssueSizeUnitName = StoreTransferReceiveGridData[i].IssueSizeUnitName;
                TransactionItemList.IssuePackQty = StoreTransferReceiveGridData[i].IssuePackQty;
                TransactionItemList.IssueQty = StoreTransferReceiveGridData[i].IssueQty;
                TransactionItemList.IssueUnitName = StoreTransferReceiveGridData[i].IssueUnitName;

                TransactionItemList.PackSizeName = StoreTransferReceiveGridData[i].PackSizeName;
                TransactionItemList.SizeUnitName = StoreTransferReceiveGridData[i].SizeUnitName;
                TransactionItemList.PackQty = StoreTransferReceiveGridData[i].PackQty;
                TransactionItemList.ReceiveQty = StoreTransferReceiveGridData[i].ReceiveQty;
                TransactionItemList.ReceiveUnitName = StoreTransferReceiveGridData[i].ReceiveUnitName;

                FinalObject.TransactionItemList.push(TransactionItemList);
                TransactionItemList = {
                    "TransItemID": "", "TransactionID": "", "ItemID": "", "SupplierID": "", "IssuePackSizeName": "", "IssueSizeUnitName": "",
                    "IssuePackQty": "", "IssueQty": "", "IssueUnitName": "", "PackSizeName": "", "SizeUnitName": "",
                    "PackQty": "", "ReceiveQty": "", "ReceiveUnitName": ""
                };
                //}
            }

            if (changeStatus == 1) {
                $.ajax({
                    url: '@Url.Action("StoreTransferReceive", "StoreTransferReceive")',
                    data: JSON.stringify(FinalObject),
                    type: 'POST',
                    contentType: 'application/json;',
                    dataType: 'json',
                    beforeSend: function () {
                        $("#divLoading").show();
                    },
                    complete: function () {
                        $("#divLoading").hide();
                    },
                    success: function (response) {
                        //ItemGridchangeStatus = 0;
                        if (response.Msg.Type == 2) {

                            $('#MessageText').html(response.Msg.Msg);
                            $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });

                            $("#TransactionID").val(response.TransactionID);
                            $("#TransactionNo").val(response.TransactionNo);

                            $("#StoreTransferReceiveGrid").data('kendoGrid').dataSource.data(response.TransactionItemList);
                            changeStatus = 0;
                            PageStatus = "NCF";

                        }
                        else if (response.Msg.Type == 3) {
                            //ItemGridchangeStatus = 0;
                            $('#MessageText').html(response.Msg.Msg);
                            $("#MessageText").css({ 'color': 'green', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });

                            $("#StoreTransferReceiveGrid").data('kendoGrid').dataSource.data(response.TransactionItemList);
                            changeStatus = 0;
                            PageStatus = "NCF";

                        }
                        else {
                            $('#MessageText').html(response.Msg.Msg);
                            $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'center' });
                        }
                    } //End of success call
                }); //End of ajax call
            }
            else {
                $("#MessageText").html("No Changes to Save.");
                $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'left' });
            }

        }
        else {
            $("#MessageText").html("Please Enter the Required Data Properly.");
            $("#MessageText").css({ 'color': 'red', 'font-size': 'larger', 'font-weight': 'bold', 'text-align': 'left' });
        }

        FinalObject = {
            "TransactionID": "", "TransactionNo": "", "RefTransactionID": "", "RefTransactionNo": "", "TransactionDate": "", "Remark": "", "IssueFrom": "", "IssueTo": "", "TransactionItemList": []
        };
    };

    //-----------------------------------End of Saving Data------------------------------------------------------------------------------------
</script>
