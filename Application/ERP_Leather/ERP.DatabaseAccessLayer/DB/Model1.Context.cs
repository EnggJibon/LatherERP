//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERP.DatabaseAccessLayer.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BLC_DEVEntities : DbContext
    {
        public BLC_DEVEntities()
            : base("name=BLC_DEVEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<INV_ChemStockDaily> INV_ChemStockDaily { get; set; }
        public virtual DbSet<INV_ChemStockItem> INV_ChemStockItem { get; set; }
        public virtual DbSet<INV_ChemStockSupplier> INV_ChemStockSupplier { get; set; }
        public virtual DbSet<INV_CLTransfer> INV_CLTransfer { get; set; }
        public virtual DbSet<INV_CrustLeatherIssue> INV_CrustLeatherIssue { get; set; }
        public virtual DbSet<Inv_LeatherIssue> Inv_LeatherIssue { get; set; }
        public virtual DbSet<Inv_LeatherIssueItem> Inv_LeatherIssueItem { get; set; }
        public virtual DbSet<Inv_LeatherStockAdjustItem> Inv_LeatherStockAdjustItem { get; set; }
        public virtual DbSet<Inv_LeatherStockAdjustRequest> Inv_LeatherStockAdjustRequest { get; set; }
        public virtual DbSet<Inv_LeatherTransferReceiveItem> Inv_LeatherTransferReceiveItem { get; set; }
        public virtual DbSet<Inv_LeatherTransferRecieve> Inv_LeatherTransferRecieve { get; set; }
        public virtual DbSet<Inv_StockDaily> Inv_StockDaily { get; set; }
        public virtual DbSet<Inv_StockItem> Inv_StockItem { get; set; }
        public virtual DbSet<Inv_StockSupplier> Inv_StockSupplier { get; set; }
        public virtual DbSet<Inv_StockSupplierAudit> Inv_StockSupplierAudit { get; set; }
        public virtual DbSet<INV_StoreTrans> INV_StoreTrans { get; set; }
        public virtual DbSet<INV_StoreTransChallan> INV_StoreTransChallan { get; set; }
        public virtual DbSet<INV_StoreTransItem> INV_StoreTransItem { get; set; }
        public virtual DbSet<INV_StoreTransRequest> INV_StoreTransRequest { get; set; }
        public virtual DbSet<INV_TransRequest> INV_TransRequest { get; set; }
        public virtual DbSet<INV_TransRequestItem> INV_TransRequestItem { get; set; }
        public virtual DbSet<INV_TransRequestRef> INV_TransRequestRef { get; set; }
        public virtual DbSet<INV_WetBlueIssue> INV_WetBlueIssue { get; set; }
        public virtual DbSet<INV_WetBlueIssueItem> INV_WetBlueIssueItem { get; set; }
        public virtual DbSet<INV_WetBlueSelectionStock> INV_WetBlueSelectionStock { get; set; }
        public virtual DbSet<INV_WetBlueStockDaily> INV_WetBlueStockDaily { get; set; }
        public virtual DbSet<INV_WetBlueStockItem> INV_WetBlueStockItem { get; set; }
        public virtual DbSet<INV_WetBlueStockSupplier> INV_WetBlueStockSupplier { get; set; }
        public virtual DbSet<LCM_BankDebitVoucher> LCM_BankDebitVoucher { get; set; }
        public virtual DbSet<LCM_BillofLading> LCM_BillofLading { get; set; }
        public virtual DbSet<LCM_CnfBill> LCM_CnfBill { get; set; }
        public virtual DbSet<LCM_CommercialInvoice> LCM_CommercialInvoice { get; set; }
        public virtual DbSet<LCM_CommercialInvoiceItem> LCM_CommercialInvoiceItem { get; set; }
        public virtual DbSet<LCM_Insurence> LCM_Insurence { get; set; }
        public virtual DbSet<LCM_LCOpening> LCM_LCOpening { get; set; }
        public virtual DbSet<LCM_LCRetirement> LCM_LCRetirement { get; set; }
        public virtual DbSet<LCM_LimInfo> LCM_LimInfo { get; set; }
        public virtual DbSet<LCM_PackingList> LCM_PackingList { get; set; }
        public virtual DbSet<LCM_PackingListItem> LCM_PackingListItem { get; set; }
        public virtual DbSet<LCM_PackingListPacks> LCM_PackingListPacks { get; set; }
        public virtual DbSet<PRD_ChemProdReq> PRD_ChemProdReq { get; set; }
        public virtual DbSet<PRD_ChemProdReqItem> PRD_ChemProdReqItem { get; set; }
        public virtual DbSet<PRD_CLProduction> PRD_CLProduction { get; set; }
        public virtual DbSet<PRD_CLProductionChemical> PRD_CLProductionChemical { get; set; }
        public virtual DbSet<PRD_CLProductionColor> PRD_CLProductionColor { get; set; }
        public virtual DbSet<PRD_CLProductionDrum> PRD_CLProductionDrum { get; set; }
        public virtual DbSet<PRD_CrustLeatherQC> PRD_CrustLeatherQC { get; set; }
        public virtual DbSet<PRD_Recipe> PRD_Recipe { get; set; }
        public virtual DbSet<PRD_RecipeItem> PRD_RecipeItem { get; set; }
        public virtual DbSet<PRD_WBProduction> PRD_WBProduction { get; set; }
        public virtual DbSet<PRD_WBProductionChemical> PRD_WBProductionChemical { get; set; }
        public virtual DbSet<PRD_WBProductionPurchase> PRD_WBProductionPurchase { get; set; }
        public virtual DbSet<PRD_WBSelection> PRD_WBSelection { get; set; }
        public virtual DbSet<PRD_WBSelectionGrade> PRD_WBSelectionGrade { get; set; }
        public virtual DbSet<PRD_WBSellectionIssue> PRD_WBSellectionIssue { get; set; }
        public virtual DbSet<PRD_WBSellectionIssueGrade> PRD_WBSellectionIssueGrade { get; set; }
        public virtual DbSet<PRD_WBSellectionIssueItem> PRD_WBSellectionIssueItem { get; set; }
        public virtual DbSet<PRD_WetBlueProductionStock> PRD_WetBlueProductionStock { get; set; }
        public virtual DbSet<PRD_YearMonth> PRD_YearMonth { get; set; }
        public virtual DbSet<PRD_YearMonthCrustReqDate> PRD_YearMonthCrustReqDate { get; set; }
        public virtual DbSet<PRD_YearMonthCrustReqItemColor> PRD_YearMonthCrustReqItemColor { get; set; }
        public virtual DbSet<PRD_YearMonthCrustScheduleColor> PRD_YearMonthCrustScheduleColor { get; set; }
        public virtual DbSet<PRD_YearMonthCrustScheduleDrum> PRD_YearMonthCrustScheduleDrum { get; set; }
        public virtual DbSet<PRD_YearMonthSchedule> PRD_YearMonthSchedule { get; set; }
        public virtual DbSet<PRD_YearMonthScheduleDate> PRD_YearMonthScheduleDate { get; set; }
        public virtual DbSet<PRD_YearMonthSchedulePurchase> PRD_YearMonthSchedulePurchase { get; set; }
        public virtual DbSet<Prq_BillPayment> Prq_BillPayment { get; set; }
        public virtual DbSet<Prq_BillPaymentReference> Prq_BillPaymentReference { get; set; }
        public virtual DbSet<Prq_BillRealization> Prq_BillRealization { get; set; }
        public virtual DbSet<PRQ_ChemBillPymtReference> PRQ_ChemBillPymtReference { get; set; }
        public virtual DbSet<PRQ_ChemBillRealization> PRQ_ChemBillRealization { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcOrdr> PRQ_ChemFrgnPurcOrdr { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcOrdrItem> PRQ_ChemFrgnPurcOrdrItem { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcOrdrRqsn> PRQ_ChemFrgnPurcOrdrRqsn { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcRecv> PRQ_ChemFrgnPurcRecv { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcRecvChallan> PRQ_ChemFrgnPurcRecvChallan { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcRecvItem> PRQ_ChemFrgnPurcRecvItem { get; set; }
        public virtual DbSet<PRQ_ChemFrgnPurcRecvPL> PRQ_ChemFrgnPurcRecvPL { get; set; }
        public virtual DbSet<PRQ_ChemicalPI> PRQ_ChemicalPI { get; set; }
        public virtual DbSet<PRQ_ChemicalPIItem> PRQ_ChemicalPIItem { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcBill> PRQ_ChemLocalPurcBill { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcBillItem> PRQ_ChemLocalPurcBillItem { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcBillPayment> PRQ_ChemLocalPurcBillPayment { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcBillRef> PRQ_ChemLocalPurcBillRef { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcRecv> PRQ_ChemLocalPurcRecv { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcRecvChallan> PRQ_ChemLocalPurcRecvChallan { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcRecvItem> PRQ_ChemLocalPurcRecvItem { get; set; }
        public virtual DbSet<PRQ_ChemLocalPurcRecvPO> PRQ_ChemLocalPurcRecvPO { get; set; }
        public virtual DbSet<PRQ_ChemPurcReq> PRQ_ChemPurcReq { get; set; }
        public virtual DbSet<PRQ_ChemPurcReqItem> PRQ_ChemPurcReqItem { get; set; }
        public virtual DbSet<Prq_PreGradeChallan> Prq_PreGradeChallan { get; set; }
        public virtual DbSet<Prq_PreGradeSelectedData> Prq_PreGradeSelectedData { get; set; }
        public virtual DbSet<Prq_PreGradeSelection> Prq_PreGradeSelection { get; set; }
        public virtual DbSet<Prq_Purchase> Prq_Purchase { get; set; }
        public virtual DbSet<Prq_PurchaseChallanItem> Prq_PurchaseChallanItem { get; set; }
        public virtual DbSet<Prq_PurchaseYearPeriod> Prq_PurchaseYearPeriod { get; set; }
        public virtual DbSet<Prq_PurchaseYearPeriodItem> Prq_PurchaseYearPeriodItem { get; set; }
        public virtual DbSet<Prq_PurchaseYearPeriodItemAudit> Prq_PurchaseYearPeriodItemAudit { get; set; }
        public virtual DbSet<Prq_PurchaseYearTarget> Prq_PurchaseYearTarget { get; set; }
        public virtual DbSet<Prq_SupplierBill> Prq_SupplierBill { get; set; }
        public virtual DbSet<Prq_SupplierBillChallan> Prq_SupplierBillChallan { get; set; }
        public virtual DbSet<Prq_SupplierBillItem> Prq_SupplierBillItem { get; set; }
        public virtual DbSet<SLS_BuyerOrder> SLS_BuyerOrder { get; set; }
        public virtual DbSet<Sys_Article> Sys_Article { get; set; }
        public virtual DbSet<Sys_Bank> Sys_Bank { get; set; }
        public virtual DbSet<Sys_Branch> Sys_Branch { get; set; }
        public virtual DbSet<Sys_Buyer> Sys_Buyer { get; set; }
        public virtual DbSet<Sys_BuyerAddress> Sys_BuyerAddress { get; set; }
        public virtual DbSet<Sys_BuyerAgent> Sys_BuyerAgent { get; set; }
        public virtual DbSet<Sys_ChemicalItem> Sys_ChemicalItem { get; set; }
        public virtual DbSet<Sys_Color> Sys_Color { get; set; }
        public virtual DbSet<Sys_Country> Sys_Country { get; set; }
        public virtual DbSet<Sys_Currency> Sys_Currency { get; set; }
        public virtual DbSet<Sys_Grade> Sys_Grade { get; set; }
        public virtual DbSet<Sys_GradeRange> Sys_GradeRange { get; set; }
        public virtual DbSet<Sys_GradeRangeFormat> Sys_GradeRangeFormat { get; set; }
        public virtual DbSet<Sys_ItemType> Sys_ItemType { get; set; }
        public virtual DbSet<Sys_LeatherStatus> Sys_LeatherStatus { get; set; }
        public virtual DbSet<Sys_LeatherType> Sys_LeatherType { get; set; }
        public virtual DbSet<Sys_Location> Sys_Location { get; set; }
        public virtual DbSet<Sys_Machine> Sys_Machine { get; set; }
        public virtual DbSet<Sys_PaymentMethod> Sys_PaymentMethod { get; set; }
        public virtual DbSet<Sys_PaymentType> Sys_PaymentType { get; set; }
        public virtual DbSet<Sys_Port> Sys_Port { get; set; }
        public virtual DbSet<Sys_PreDefineValue> Sys_PreDefineValue { get; set; }
        public virtual DbSet<Sys_PreDefineValueFor> Sys_PreDefineValueFor { get; set; }
        public virtual DbSet<Sys_ProductionProces> Sys_ProductionProces { get; set; }
        public virtual DbSet<Sys_Size> Sys_Size { get; set; }
        public virtual DbSet<Sys_Source> Sys_Source { get; set; }
        public virtual DbSet<SYS_Store> SYS_Store { get; set; }
        public virtual DbSet<Sys_Supplier> Sys_Supplier { get; set; }
        public virtual DbSet<Sys_SupplierAddress> Sys_SupplierAddress { get; set; }
        public virtual DbSet<Sys_SupplierAgent> Sys_SupplierAgent { get; set; }
        public virtual DbSet<Sys_Unit> Sys_Unit { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<AccessLog> AccessLogs { get; set; }
        public virtual DbSet<AdditionalOperationPermission> AdditionalOperationPermissions { get; set; }
        public virtual DbSet<AdditionalOperationPermissionsAudit> AdditionalOperationPermissionsAudits { get; set; }
        public virtual DbSet<AdditionalScreenPermission> AdditionalScreenPermissions { get; set; }
        public virtual DbSet<AdditionalScreenPermissionsAudit> AdditionalScreenPermissionsAudits { get; set; }
        public virtual DbSet<ApplicationPolicy> ApplicationPolicies { get; set; }
        public virtual DbSet<ApplicationPoliciesAudit> ApplicationPoliciesAudits { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<MenuItem> MenuItems { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RolesAudit> RolesAudits { get; set; }
        public virtual DbSet<RoleWiseOperationPermission> RoleWiseOperationPermissions { get; set; }
        public virtual DbSet<RoleWiseOperationPermissionsAudit> RoleWiseOperationPermissionsAudits { get; set; }
        public virtual DbSet<RoleWiseScreenPermission> RoleWiseScreenPermissions { get; set; }
        public virtual DbSet<RoleWiseScreenPermissionsAudit> RoleWiseScreenPermissionsAudits { get; set; }
        public virtual DbSet<ScreenOperation> ScreenOperations { get; set; }
        public virtual DbSet<ScreenOperationsAudit> ScreenOperationsAudits { get; set; }
        public virtual DbSet<Screen> Screens { get; set; }
        public virtual DbSet<UserCredentialInformation> UserCredentialInformations { get; set; }
        public virtual DbSet<UserCredentialInformationAudit> UserCredentialInformationAudits { get; set; }
        public virtual DbSet<UserInRole> UserInRoles { get; set; }
        public virtual DbSet<UserInRolesAudit> UserInRolesAudits { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<vw_MenuInScreen> vw_MenuInScreen { get; set; }
        public virtual DbSet<INV_CLTransferFrom> INV_CLTransferFrom { get; set; }
        public virtual DbSet<INV_CLTransferTo> INV_CLTransferTo { get; set; }
        public virtual DbSet<INV_CrustBuyerStock> INV_CrustBuyerStock { get; set; }
        public virtual DbSet<INV_CrustLeatherIssueColor> INV_CrustLeatherIssueColor { get; set; }
        public virtual DbSet<INV_CrustQCStock> INV_CrustQCStock { get; set; }
        public virtual DbSet<INV_CrustStockDaily> INV_CrustStockDaily { get; set; }
        public virtual DbSet<INV_CrustStockItem> INV_CrustStockItem { get; set; }
        public virtual DbSet<PRD_WBSelectionItem> PRD_WBSelectionItem { get; set; }
        public virtual DbSet<PRD_CrustLeatherQCRef> PRD_CrustLeatherQCRef { get; set; }
        public virtual DbSet<PRD_CrustLeatherProductionStock> PRD_CrustLeatherProductionStock { get; set; }
        public virtual DbSet<INV_CrustLeatherReceive> INV_CrustLeatherReceive { get; set; }
        public virtual DbSet<INV_CrustLeatherReceiveColor> INV_CrustLeatherReceiveColor { get; set; }
        public virtual DbSet<INV_CrustLeatherReceiveItem> INV_CrustLeatherReceiveItem { get; set; }
        public virtual DbSet<INV_CrustLeatherReceiveRef> INV_CrustLeatherReceiveRef { get; set; }
        public virtual DbSet<INV_FinishBuyerStock> INV_FinishBuyerStock { get; set; }
        public virtual DbSet<INV_FinishLeatherIssue> INV_FinishLeatherIssue { get; set; }
        public virtual DbSet<INV_FinishLeatherIssueColor> INV_FinishLeatherIssueColor { get; set; }
        public virtual DbSet<INV_FinishLeatherIssueItem> INV_FinishLeatherIssueItem { get; set; }
        public virtual DbSet<INV_FinishLeatherReceive> INV_FinishLeatherReceive { get; set; }
        public virtual DbSet<INV_FinishLeatherReceiveColor> INV_FinishLeatherReceiveColor { get; set; }
        public virtual DbSet<INV_FinishLeatherReceiveItem> INV_FinishLeatherReceiveItem { get; set; }
        public virtual DbSet<INV_FinishLeatherReceiveRef> INV_FinishLeatherReceiveRef { get; set; }
        public virtual DbSet<INV_FinishStockDaily> INV_FinishStockDaily { get; set; }
        public virtual DbSet<INV_FinishStockItem> INV_FinishStockItem { get; set; }
        public virtual DbSet<INV_FNTransfer> INV_FNTransfer { get; set; }
        public virtual DbSet<INV_FNTransferFrom> INV_FNTransferFrom { get; set; }
        public virtual DbSet<INV_FNTransferTo> INV_FNTransferTo { get; set; }
        public virtual DbSet<PRD_FinishLeatherProductionStock> PRD_FinishLeatherProductionStock { get; set; }
        public virtual DbSet<PRD_FinishLeatherQC> PRD_FinishLeatherQC { get; set; }
        public virtual DbSet<PRD_FinishLeatherQCItem> PRD_FinishLeatherQCItem { get; set; }
        public virtual DbSet<PRD_FinishLeatherQCRef> PRD_FinishLeatherQCRef { get; set; }
        public virtual DbSet<PRD_FinishLeatherQCSelection> PRD_FinishLeatherQCSelection { get; set; }
        public virtual DbSet<PRD_FNProduction> PRD_FNProduction { get; set; }
        public virtual DbSet<PRD_FNProductionChemical> PRD_FNProductionChemical { get; set; }
        public virtual DbSet<PRD_FNProductionColor> PRD_FNProductionColor { get; set; }
        public virtual DbSet<PRD_FNProductionDrum> PRD_FNProductionDrum { get; set; }
        public virtual DbSet<PRD_YearMonthFinishReqDate> PRD_YearMonthFinishReqDate { get; set; }
        public virtual DbSet<PRD_YearMonthFinishReqItemColor> PRD_YearMonthFinishReqItemColor { get; set; }
        public virtual DbSet<PRD_YearMonthFinishScheduleColor> PRD_YearMonthFinishScheduleColor { get; set; }
        public virtual DbSet<PRD_YearMonthFinishScheduleDrum> PRD_YearMonthFinishScheduleDrum { get; set; }
        public virtual DbSet<LCM_LCFile> LCM_LCFile { get; set; }
        public virtual DbSet<LCM_LCFileRecord> LCM_LCFileRecord { get; set; }
        public virtual DbSet<Prq_PurchaseChallan> Prq_PurchaseChallan { get; set; }
        public virtual DbSet<INV_FinishBuyerQCStock> INV_FinishBuyerQCStock { get; set; }
        public virtual DbSet<INV_FinishOwnQCStock> INV_FinishOwnQCStock { get; set; }
        public virtual DbSet<EXP_BillofLading> EXP_BillofLading { get; set; }
        public virtual DbSet<EXP_CI> EXP_CI { get; set; }
        public virtual DbSet<EXP_CIPI> EXP_CIPI { get; set; }
        public virtual DbSet<EXP_CnFBill> EXP_CnFBill { get; set; }
        public virtual DbSet<EXP_LCOpening> EXP_LCOpening { get; set; }
        public virtual DbSet<EXP_LeatherPI> EXP_LeatherPI { get; set; }
        public virtual DbSet<EXP_PackingList> EXP_PackingList { get; set; }
        public virtual DbSet<EXP_PLPI> EXP_PLPI { get; set; }
        public virtual DbSet<EXP_PLPIItemColorBale> EXP_PLPIItemColorBale { get; set; }
        public virtual DbSet<EXP_AgentCommissionBuyer> EXP_AgentCommissionBuyer { get; set; }
        public virtual DbSet<EXP_BankDebitVoucher> EXP_BankDebitVoucher { get; set; }
        public virtual DbSet<EXP_DeliveryChallan> EXP_DeliveryChallan { get; set; }
        public virtual DbSet<EXP_DeliveryChallanCI> EXP_DeliveryChallanCI { get; set; }
        public virtual DbSet<EXP_ExportForm> EXP_ExportForm { get; set; }
        public virtual DbSet<EXP_LCRetirement> EXP_LCRetirement { get; set; }
        public virtual DbSet<EXP_TransportChallan> EXP_TransportChallan { get; set; }
        public virtual DbSet<EXP_TransportChallanCI> EXP_TransportChallanCI { get; set; }
        public virtual DbSet<PRD_CrustLeatherQCItem> PRD_CrustLeatherQCItem { get; set; }
        public virtual DbSet<PRD_CrustLeatherQCSelection> PRD_CrustLeatherQCSelection { get; set; }
        public virtual DbSet<INV_CrustLeatherIssueItem> INV_CrustLeatherIssueItem { get; set; }
        public virtual DbSet<EXP_CIPIItem> EXP_CIPIItem { get; set; }
        public virtual DbSet<EXP_CIPIItemColor> EXP_CIPIItemColor { get; set; }
        public virtual DbSet<EXP_PLPIItemColor> EXP_PLPIItemColor { get; set; }
        public virtual DbSet<INV_WetBlueIssueRef> INV_WetBlueIssueRef { get; set; }
        public virtual DbSet<PRD_CLProductionItem> PRD_CLProductionItem { get; set; }
        public virtual DbSet<PRD_FNProductionItem> PRD_FNProductionItem { get; set; }
        public virtual DbSet<PRD_YearMonthCrustReqItem> PRD_YearMonthCrustReqItem { get; set; }
        public virtual DbSet<PRD_YearMonthCrustScheduleItem> PRD_YearMonthCrustScheduleItem { get; set; }
        public virtual DbSet<PRD_YearMonthFinishReqItem> PRD_YearMonthFinishReqItem { get; set; }
        public virtual DbSet<PRD_YearMonthFinishScheduleItem> PRD_YearMonthFinishScheduleItem { get; set; }
        public virtual DbSet<Sys_ArticleChallan> Sys_ArticleChallan { get; set; }
        public virtual DbSet<Sys_ArticleChallanColor> Sys_ArticleChallanColor { get; set; }
        public virtual DbSet<Sys_ArticleChallanDetail> Sys_ArticleChallanDetail { get; set; }
        public virtual DbSet<Sys_CompanyInfo> Sys_CompanyInfo { get; set; }
        public virtual DbSet<INV_FinishPackingStock> INV_FinishPackingStock { get; set; }
        public virtual DbSet<EXP_FreightBill> EXP_FreightBill { get; set; }
        public virtual DbSet<SLS_BuyerOrderDelivery> SLS_BuyerOrderDelivery { get; set; }
        public virtual DbSet<SLS_BuyerOrderPrice> SLS_BuyerOrderPrice { get; set; }
        public virtual DbSet<Sys_Comodity> Sys_Comodity { get; set; }
        public virtual DbSet<EXP_PIItem> EXP_PIItem { get; set; }
        public virtual DbSet<EXP_PIItemColor> EXP_PIItemColor { get; set; }
        public virtual DbSet<SLS_BuyerOrderItem> SLS_BuyerOrderItem { get; set; }
        public virtual DbSet<SLS_BuyerOrderItemColor> SLS_BuyerOrderItemColor { get; set; }
        public virtual DbSet<Sys_TransHead> Sys_TransHead { get; set; }
        public virtual DbSet<EXP_AgentCommissionBuyerCI> EXP_AgentCommissionBuyerCI { get; set; }
        public virtual DbSet<EXP_AgentCommission> EXP_AgentCommission { get; set; }
        public virtual DbSet<EXP_BankLoan> EXP_BankLoan { get; set; }
        public virtual DbSet<EXP_BankVoucher> EXP_BankVoucher { get; set; }
        public virtual DbSet<EXP_BankVoucherDtl> EXP_BankVoucherDtl { get; set; }
        public virtual DbSet<EXP_BillofLadingContainer> EXP_BillofLadingContainer { get; set; }
        public virtual DbSet<LCM_BillofLadingContainer> LCM_BillofLadingContainer { get; set; }
    
        [DbFunction("BLC_DEVEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[BLC_DEVEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<UspDateWiseStock_Result> UspDateWiseStock(string fromDate, string toDate, Nullable<int> storeId, Nullable<int> itemTypeId)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspDateWiseStock_Result>("UspDateWiseStock", fromDateParameter, toDateParameter, storeIdParameter, itemTypeIdParameter);
        }
    
        public virtual ObjectResult<UspDateWiseStock1_Result> UspDateWiseStock1(string fromdate, string todate, Nullable<long> storeid, Nullable<int> itemtypeid)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(string));
    
            var storeidParameter = storeid.HasValue ?
                new ObjectParameter("storeid", storeid) :
                new ObjectParameter("storeid", typeof(long));
    
            var itemtypeidParameter = itemtypeid.HasValue ?
                new ObjectParameter("itemtypeid", itemtypeid) :
                new ObjectParameter("itemtypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspDateWiseStock1_Result>("UspDateWiseStock1", fromdateParameter, todateParameter, storeidParameter, itemtypeidParameter);
        }
    
        public virtual ObjectResult<UspDateWiseStock2_Result> UspDateWiseStock2(string fromdate, Nullable<long> storeid, Nullable<int> itemtypeid)
        {
            var fromdateParameter = fromdate != null ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(string));
    
            var storeidParameter = storeid.HasValue ?
                new ObjectParameter("storeid", storeid) :
                new ObjectParameter("storeid", typeof(long));
    
            var itemtypeidParameter = itemtypeid.HasValue ?
                new ObjectParameter("itemtypeid", itemtypeid) :
                new ObjectParameter("itemtypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspDateWiseStock2_Result>("UspDateWiseStock2", fromdateParameter, storeidParameter, itemtypeidParameter);
        }
    
        public virtual int UspGetLoanReceivedRequestData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetLoanReceivedRequestData");
        }
    
        public virtual ObjectResult<UspGetLoanReturnRequestInfo_Result> UspGetLoanReturnRequestInfo(Nullable<long> requestID)
        {
            var requestIDParameter = requestID.HasValue ?
                new ObjectParameter("RequestID", requestID) :
                new ObjectParameter("RequestID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetLoanReturnRequestInfo_Result>("UspGetLoanReturnRequestInfo", requestIDParameter);
        }
    
        public virtual ObjectResult<UspGetPurchaseIdBySupplierAndStoreId_Result> UspGetPurchaseIdBySupplierAndStoreId(Nullable<int> supplierID, Nullable<int> receiveStore)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiveStoreParameter = receiveStore.HasValue ?
                new ObjectParameter("ReceiveStore", receiveStore) :
                new ObjectParameter("ReceiveStore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetPurchaseIdBySupplierAndStoreId_Result>("UspGetPurchaseIdBySupplierAndStoreId", supplierIDParameter, receiveStoreParameter);
        }
    
        public virtual ObjectResult<UspGetPurchaseRequestInformation_Result> UspGetPurchaseRequestInformation(Nullable<int> supplierId, Nullable<int> leatherTypeId, Nullable<int> storeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> itemTypeId)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var leatherTypeIdParameter = leatherTypeId.HasValue ?
                new ObjectParameter("LeatherTypeId", leatherTypeId) :
                new ObjectParameter("LeatherTypeId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetPurchaseRequestInformation_Result>("UspGetPurchaseRequestInformation", supplierIdParameter, leatherTypeIdParameter, storeIdParameter, fromDateParameter, toDateParameter, itemTypeIdParameter);
        }
    
        public virtual int UspGetPurchaseTypeWisePurchaseSummary(Nullable<int> supplierID, string purchaseType, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<byte> storeID, Nullable<byte> itemTypeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseTypeParameter = purchaseType != null ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(string));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(byte));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetPurchaseTypeWisePurchaseSummary", supplierIDParameter, purchaseTypeParameter, purchaseYearParameter, fromDateParameter, toDateParameter, storeIDParameter, itemTypeIDParameter);
        }
    
        public virtual ObjectResult<UspGetPurchaseWithBillInformation_Result> UspGetPurchaseWithBillInformation(Nullable<int> supplierID, Nullable<int> itemtypeID, Nullable<int> storeID, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("supplierID", supplierID) :
                new ObjectParameter("supplierID", typeof(int));
    
            var itemtypeIDParameter = itemtypeID.HasValue ?
                new ObjectParameter("itemtypeID", itemtypeID) :
                new ObjectParameter("itemtypeID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("storeID", storeID) :
                new ObjectParameter("storeID", typeof(int));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("purchaseYear", purchaseYear) :
                new ObjectParameter("purchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetPurchaseWithBillInformation_Result>("UspGetPurchaseWithBillInformation", supplierIDParameter, itemtypeIDParameter, storeIDParameter, purchaseYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int UspGetSourceWisePurchaseSummary(Nullable<int> supplierID, string purchaseType, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<byte> storeID, Nullable<byte> itemTypeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseTypeParameter = purchaseType != null ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(string));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(byte));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetSourceWisePurchaseSummary", supplierIDParameter, purchaseTypeParameter, purchaseYearParameter, fromDateParameter, toDateParameter, storeIDParameter, itemTypeIDParameter);
        }
    
        public virtual ObjectResult<UspGetSupplierBillDetailInfo_Result> UspGetSupplierBillDetailInfo(Nullable<int> supplierId, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetSupplierBillDetailInfo_Result>("UspGetSupplierBillDetailInfo", supplierIdParameter, purchaseYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int UspGetSupplierBillInformation(Nullable<int> supplierId, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetSupplierBillInformation", supplierIdParameter, purchaseYearParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<UspGetSupplierRHLPurchaseAndPaymentInfo_Result> UspGetSupplierRHLPurchaseAndPaymentInfo(Nullable<int> supplierId, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<decimal> approximateRate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var approximateRateParameter = approximateRate.HasValue ?
                new ObjectParameter("ApproximateRate", approximateRate) :
                new ObjectParameter("ApproximateRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetSupplierRHLPurchaseAndPaymentInfo_Result>("UspGetSupplierRHLPurchaseAndPaymentInfo", supplierIdParameter, purchaseYearParameter, fromDateParameter, toDateParameter, approximateRateParameter);
        }
    
        public virtual int UspGetSupplierWisePurchaseDetail(Nullable<int> supplierID, string purchaseType, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<byte> storeID, Nullable<byte> itemTypeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseTypeParameter = purchaseType != null ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(string));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(byte));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetSupplierWisePurchaseDetail", supplierIDParameter, purchaseTypeParameter, purchaseYearParameter, fromDateParameter, toDateParameter, storeIDParameter, itemTypeIDParameter);
        }
    
        public virtual int UspGetSupplierWisePurchaseSummary(Nullable<int> supplierID, string purchaseType, string purchaseYear, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<byte> storeID, Nullable<byte> itemTypeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseTypeParameter = purchaseType != null ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(string));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(byte));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetSupplierWisePurchaseSummary", supplierIDParameter, purchaseTypeParameter, purchaseYearParameter, fromDateParameter, toDateParameter, storeIDParameter, itemTypeIDParameter);
        }
    
        public virtual ObjectResult<string> UspGetUserPermission(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UspGetUserPermission", userIdParameter);
        }
    
        public virtual ObjectResult<UspGradeSelectionReport_Result> UspGradeSelectionReport(Nullable<int> gradeRangeId, Nullable<int> supplierID, Nullable<int> selectionStore, Nullable<int> selectionId)
        {
            var gradeRangeIdParameter = gradeRangeId.HasValue ?
                new ObjectParameter("GradeRangeId", gradeRangeId) :
                new ObjectParameter("GradeRangeId", typeof(int));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var selectionStoreParameter = selectionStore.HasValue ?
                new ObjectParameter("SelectionStore", selectionStore) :
                new ObjectParameter("SelectionStore", typeof(int));
    
            var selectionIdParameter = selectionId.HasValue ?
                new ObjectParameter("SelectionId", selectionId) :
                new ObjectParameter("SelectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGradeSelectionReport_Result>("UspGradeSelectionReport", gradeRangeIdParameter, supplierIDParameter, selectionStoreParameter, selectionIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UspItemWiseStock(Nullable<int> store, Nullable<int> itemType, Nullable<int> lATERtYPE)
        {
            var storeParameter = store.HasValue ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(int));
    
            var itemTypeParameter = itemType.HasValue ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(int));
    
            var lATERtYPEParameter = lATERtYPE.HasValue ?
                new ObjectParameter("lATERtYPE", lATERtYPE) :
                new ObjectParameter("lATERtYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UspItemWiseStock", storeParameter, itemTypeParameter, lATERtYPEParameter);
        }
    
        public virtual ObjectResult<UspLcmBankDebitVoucherEntryReport_Result> UspLcmBankDebitVoucherEntryReport(string bDVNo)
        {
            var bDVNoParameter = bDVNo != null ?
                new ObjectParameter("BDVNo", bDVNo) :
                new ObjectParameter("BDVNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspLcmBankDebitVoucherEntryReport_Result>("UspLcmBankDebitVoucherEntryReport", bDVNoParameter);
        }
    
        public virtual ObjectResult<UspLcmInsuraceInfoEntryReport_Result> UspLcmInsuraceInfoEntryReport(string insuranceNo)
        {
            var insuranceNoParameter = insuranceNo != null ?
                new ObjectParameter("InsuranceNo", insuranceNo) :
                new ObjectParameter("InsuranceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspLcmInsuraceInfoEntryReport_Result>("UspLcmInsuraceInfoEntryReport", insuranceNoParameter);
        }
    
        public virtual ObjectResult<UspLcmLcOpeningEntryReport_Result> UspLcmLcOpeningEntryReport(string lCNo)
        {
            var lCNoParameter = lCNo != null ?
                new ObjectParameter("LCNo", lCNo) :
                new ObjectParameter("LCNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspLcmLcOpeningEntryReport_Result>("UspLcmLcOpeningEntryReport", lCNoParameter);
        }
    
        public virtual ObjectResult<UspPreGradeSelectionReportByPurchaseId_Result> UspPreGradeSelectionReportByPurchaseId(Nullable<long> purchaseID, Nullable<int> supplierID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspPreGradeSelectionReportByPurchaseId_Result>("UspPreGradeSelectionReportByPurchaseId", purchaseIDParameter, supplierIDParameter);
        }
    
        public virtual ObjectResult<UspPreGradeSelectionReportBySupplierId_Result> UspPreGradeSelectionReportBySupplierId(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspPreGradeSelectionReportBySupplierId_Result>("UspPreGradeSelectionReportBySupplierId", supplierIDParameter);
        }
    
        public virtual ObjectResult<UspPreGradeSelectionSummaryReportByPurchaseId_Result> UspPreGradeSelectionSummaryReportByPurchaseId(Nullable<int> supplierID, Nullable<long> purchaseID, Nullable<int> rangeId)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var rangeIdParameter = rangeId.HasValue ?
                new ObjectParameter("RangeId", rangeId) :
                new ObjectParameter("RangeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspPreGradeSelectionSummaryReportByPurchaseId_Result>("UspPreGradeSelectionSummaryReportByPurchaseId", supplierIDParameter, purchaseIDParameter, rangeIdParameter);
        }
    
        public virtual int UspPrqInsertPurchaseReceiveChallanItemsIntoInventory(Nullable<long> purchaseID, string recordStatus)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var recordStatusParameter = recordStatus != null ?
                new ObjectParameter("RecordStatus", recordStatus) :
                new ObjectParameter("RecordStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspPrqInsertPurchaseReceiveChallanItemsIntoInventory", purchaseIDParameter, recordStatusParameter);
        }
    
        public virtual int UspPrqSaveItemSelectedData(Nullable<long> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspPrqSaveItemSelectedData", purchaseIDParameter);
        }
    
        public virtual int UspPrqSaveItemSelectedDataOld(Nullable<long> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspPrqSaveItemSelectedDataOld", challanIDParameter);
        }
    
        public virtual int UspPrqSavePurchaseReceiveWithChallanItems(Nullable<int> supplierID, Nullable<int> supplierAddressID, string purchaseCategory, string purchaseType, Nullable<System.DateTime> purchaseDate, string purchaseYear, string purchaseNote, Nullable<int> setBy, string challanNo, Nullable<int> sourceID, Nullable<int> locationID, Nullable<byte> receiveStore, string challanCategory, string challanNote, Nullable<System.DateTime> challanDate)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var supplierAddressIDParameter = supplierAddressID.HasValue ?
                new ObjectParameter("SupplierAddressID", supplierAddressID) :
                new ObjectParameter("SupplierAddressID", typeof(int));
    
            var purchaseCategoryParameter = purchaseCategory != null ?
                new ObjectParameter("PurchaseCategory", purchaseCategory) :
                new ObjectParameter("PurchaseCategory", typeof(string));
    
            var purchaseTypeParameter = purchaseType != null ?
                new ObjectParameter("PurchaseType", purchaseType) :
                new ObjectParameter("PurchaseType", typeof(string));
    
            var purchaseDateParameter = purchaseDate.HasValue ?
                new ObjectParameter("PurchaseDate", purchaseDate) :
                new ObjectParameter("PurchaseDate", typeof(System.DateTime));
    
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            var purchaseNoteParameter = purchaseNote != null ?
                new ObjectParameter("PurchaseNote", purchaseNote) :
                new ObjectParameter("PurchaseNote", typeof(string));
    
            var setByParameter = setBy.HasValue ?
                new ObjectParameter("SetBy", setBy) :
                new ObjectParameter("SetBy", typeof(int));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            var sourceIDParameter = sourceID.HasValue ?
                new ObjectParameter("SourceID", sourceID) :
                new ObjectParameter("SourceID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var receiveStoreParameter = receiveStore.HasValue ?
                new ObjectParameter("ReceiveStore", receiveStore) :
                new ObjectParameter("ReceiveStore", typeof(byte));
    
            var challanCategoryParameter = challanCategory != null ?
                new ObjectParameter("ChallanCategory", challanCategory) :
                new ObjectParameter("ChallanCategory", typeof(string));
    
            var challanNoteParameter = challanNote != null ?
                new ObjectParameter("ChallanNote", challanNote) :
                new ObjectParameter("ChallanNote", typeof(string));
    
            var challanDateParameter = challanDate.HasValue ?
                new ObjectParameter("ChallanDate", challanDate) :
                new ObjectParameter("ChallanDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspPrqSavePurchaseReceiveWithChallanItems", supplierIDParameter, supplierAddressIDParameter, purchaseCategoryParameter, purchaseTypeParameter, purchaseDateParameter, purchaseYearParameter, purchaseNoteParameter, setByParameter, challanNoParameter, sourceIDParameter, locationIDParameter, receiveStoreParameter, challanCategoryParameter, challanNoteParameter, challanDateParameter);
        }
    
        public virtual ObjectResult<UspPurchaseSelectionQtyCalcualtionByPurchaseId_Result> UspPurchaseSelectionQtyCalcualtionByPurchaseId(Nullable<int> supplierID, Nullable<long> purchaseID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspPurchaseSelectionQtyCalcualtionByPurchaseId_Result>("UspPurchaseSelectionQtyCalcualtionByPurchaseId", supplierIDParameter, purchaseIDParameter);
        }
    
        public virtual int UspRawHideYearlyTarget(string purchaseYear)
        {
            var purchaseYearParameter = purchaseYear != null ?
                new ObjectParameter("PurchaseYear", purchaseYear) :
                new ObjectParameter("PurchaseYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspRawHideYearlyTarget", purchaseYearParameter);
        }
    
        public virtual int UspStoreWiseItemStock(Nullable<int> storeId, Nullable<int> itemTypeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspStoreWiseItemStock", storeIdParameter, itemTypeIdParameter);
        }
    
        public virtual int UspSupplierWiseStock(Nullable<byte> storeId, Nullable<int> supplierId, Nullable<byte> itemTypeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(byte));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var itemTypeIdParameter = itemTypeId.HasValue ?
                new ObjectParameter("ItemTypeId", itemTypeId) :
                new ObjectParameter("ItemTypeId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspSupplierWiseStock", storeIdParameter, supplierIdParameter, itemTypeIdParameter);
        }
    
        public virtual ObjectResult<UspGetLoanReceivedRequestData_BAK_Result> UspGetLoanReceivedRequestData_BAK(Nullable<long> referenceID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetLoanReceivedRequestData_BAK_Result>("UspGetLoanReceivedRequestData_BAK", referenceIDParameter);
        }
    
        public virtual ObjectResult<UspGetLoanReceivedRequestInfo_Result> UspGetLoanReceivedRequestInfo(Nullable<long> referenceID)
        {
            var referenceIDParameter = referenceID.HasValue ?
                new ObjectParameter("ReferenceID", referenceID) :
                new ObjectParameter("ReferenceID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetLoanReceivedRequestInfo_Result>("UspGetLoanReceivedRequestInfo", referenceIDParameter);
        }
    
        public virtual ObjectResult<UspGetChemicalDailyStock_Result> UspGetChemicalDailyStock(Nullable<int> supplierId, Nullable<int> storeId, Nullable<int> itemId, string itemCategory, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetChemicalDailyStock_Result>("UspGetChemicalDailyStock", supplierIdParameter, storeIdParameter, itemIdParameter, itemCategoryParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<UspGetSupplierwiseChemicalStock_Result> UspGetSupplierwiseChemicalStock(Nullable<int> supplierId, Nullable<int> storeId, Nullable<int> itemId, string itemCategory, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("StoreId", storeId) :
                new ObjectParameter("StoreId", typeof(int));
    
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("ItemId", itemId) :
                new ObjectParameter("ItemId", typeof(int));
    
            var itemCategoryParameter = itemCategory != null ?
                new ObjectParameter("ItemCategory", itemCategory) :
                new ObjectParameter("ItemCategory", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetSupplierwiseChemicalStock_Result>("UspGetSupplierwiseChemicalStock", supplierIdParameter, storeIdParameter, itemIdParameter, itemCategoryParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<UspGetWetBlueProductionData_Result> UspGetWetBlueProductionData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetWetBlueProductionData_Result>("UspGetWetBlueProductionData");
        }
    
        public virtual ObjectResult<UspGetFinalGradeSelectionItemType_Result> UspGetFinalGradeSelectionItemType(Nullable<long> purchaseID)
        {
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetFinalGradeSelectionItemType_Result>("UspGetFinalGradeSelectionItemType", purchaseIDParameter);
        }
    
        public virtual ObjectResult<UspGetFinalGradeSelectedGrde_Result> UspGetFinalGradeSelectedGrde(Nullable<int> supplierID, Nullable<long> purchaseID, Nullable<int> itemTypeID, Nullable<int> leatherTypeID, Nullable<int> leatherStatusId)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("supplierID", supplierID) :
                new ObjectParameter("supplierID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("purchaseID", purchaseID) :
                new ObjectParameter("purchaseID", typeof(long));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("itemTypeID", itemTypeID) :
                new ObjectParameter("itemTypeID", typeof(int));
    
            var leatherTypeIDParameter = leatherTypeID.HasValue ?
                new ObjectParameter("leatherTypeID", leatherTypeID) :
                new ObjectParameter("leatherTypeID", typeof(int));
    
            var leatherStatusIdParameter = leatherStatusId.HasValue ?
                new ObjectParameter("leatherStatusId", leatherStatusId) :
                new ObjectParameter("leatherStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetFinalGradeSelectedGrde_Result>("UspGetFinalGradeSelectedGrde", supplierIDParameter, purchaseIDParameter, itemTypeIDParameter, leatherTypeIDParameter, leatherStatusIdParameter);
        }
    
        public virtual ObjectResult<UspGetWBSelectionDetailsBySelectionID_Result> UspGetWBSelectionDetailsBySelectionID(Nullable<int> selectionId)
        {
            var selectionIdParameter = selectionId.HasValue ?
                new ObjectParameter("SelectionId", selectionId) :
                new ObjectParameter("SelectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspGetWBSelectionDetailsBySelectionID_Result>("UspGetWBSelectionDetailsBySelectionID", selectionIdParameter);
        }
    
        public virtual int GeneratePurchaseNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePurchaseNumber");
        }
    
        public virtual int test()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test");
        }
    
        public virtual int UpdateTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTest");
        }
    
        public virtual ObjectResult<UspFinalGradeSelectionByPurchaseID_Result> UspFinalGradeSelectionByPurchaseID(Nullable<int> supplierID, Nullable<long> purchaseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> gradeRangeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var purchaseIDParameter = purchaseID.HasValue ?
                new ObjectParameter("PurchaseID", purchaseID) :
                new ObjectParameter("PurchaseID", typeof(long));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var gradeRangeIDParameter = gradeRangeID.HasValue ?
                new ObjectParameter("GradeRangeID", gradeRangeID) :
                new ObjectParameter("GradeRangeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspFinalGradeSelectionByPurchaseID_Result>("UspFinalGradeSelectionByPurchaseID", supplierIDParameter, purchaseIDParameter, fromDateParameter, toDateParameter, gradeRangeIDParameter);
        }
    
        public virtual ObjectResult<UspFinalGradeSelectionReport_Result> UspFinalGradeSelectionReport(Nullable<int> supplierID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> gradeRangeID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var gradeRangeIDParameter = gradeRangeID.HasValue ?
                new ObjectParameter("GradeRangeID", gradeRangeID) :
                new ObjectParameter("GradeRangeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspFinalGradeSelectionReport_Result>("UspFinalGradeSelectionReport", supplierIDParameter, fromDateParameter, toDateParameter, gradeRangeIDParameter);
        }
    
        public virtual int UspLcReportForChemicalCosting(Nullable<int> lCID)
        {
            var lCIDParameter = lCID.HasValue ?
                new ObjectParameter("LCID", lCID) :
                new ObjectParameter("LCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspLcReportForChemicalCosting", lCIDParameter);
        }
    
        public virtual int UspLcReportForChemicalCostingWithChemical(Nullable<int> lCID)
        {
            var lCIDParameter = lCID.HasValue ?
                new ObjectParameter("LCID", lCID) :
                new ObjectParameter("LCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspLcReportForChemicalCostingWithChemical", lCIDParameter);
        }
    
        public virtual int UsUpdatePurchaseNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UsUpdatePurchaseNo");
        }
    
        public virtual int UspGetPurchaseIdBySupplierAndStoreId1(Nullable<int> supplierID, Nullable<int> receiveStore)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var receiveStoreParameter = receiveStore.HasValue ?
                new ObjectParameter("ReceiveStore", receiveStore) :
                new ObjectParameter("ReceiveStore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UspGetPurchaseIdBySupplierAndStoreId1", supplierIDParameter, receiveStoreParameter);
        }
    }
}
