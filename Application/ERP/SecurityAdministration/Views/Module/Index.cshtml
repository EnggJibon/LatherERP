@using SecurityAdministration.BLL.ViewModels
@using Telerik.Web.Mvc.UI
@model ModuleVM
@{
    ViewBag.Title = "Module Management";
}
<style type="text/css">
    .t-filter-options {
        width: 155px !important;
    }  
</style>
@using (Html.BeginForm())
{
    <div class="row">
        <div class="col-lg-12">
            <div data-alerts="alerts" id="message" data-titles="{}" data-ids="myid" data-fade="4000"></div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    Module Setup
                    @Html.Hidden("hdnIsInsert", true)
                </div>

                <div class="panel-body">
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="" class="col-xs-4 control-label">Application ID </label>
                                <div class="col-xs-8">
                                    @Html.HiddenFor(model => model.Module.ModuleID)
                                    @Html.DropDownListFor(model => model.Module.ApplicationID, Model.ApplicationList, "--Select--", new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="" class="col-xs-4 control-label"> Title</label>
                                <div class="col-xs-8">
                                    @Html.TextBoxFor(model => model.Module.Title, new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="" class="col-xs-4 control-label"> Description</label>
                                <div class="col-xs-8">
                                    @Html.TextBoxFor(model => model.Module.Description, new { @class = "form-control input-sm" })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label for="" class="col-xs-4 control-label">Is Active</label>
                                <div class="col-xs-8">
                                    @Html.CheckBoxFor(model => model.Module.IsActive, Model.ApplicationList)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-lg-offset-10">
                            <div class="form-group ">
                                <input id="btnSave" type="button" value="Save" class="btn btn-default btn-sm" />
                                <input id="btnReset" type="button" value="Reset" class="btn btn-default btn-sm" onclick="return clearModuleData()" />
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-lg-6">
                            <div class="form-group">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                List of Modules
            </div>

            <div class="panel-body">
                @(Html.Telerik().Grid<ModuleView>()
                    .BindTo(ViewBag.ModuleList as List<ModuleView>)
                    .Name("gvModuleList")
                    .DataKeys(keys => keys.Add(k => k.ModuleID))
                    .Filterable()
                    .Columns(column =>
                    {
                        column.Bound(s => s.ModuleID).Hidden().Template(@<input type="hidden" id="@item.ModuleID.Trim()" value="@item.ModuleID"/>);
                        column.Bound(s => s.ModuleID);
                        column.Bound(s => s.Title);
                        column.Bound(s => s.ApplicationID).Hidden();
                        column.Bound(s => s.ApplicationName);
                        column.Bound(s => s.IsActive).Template(@<text> @(item.IsActive ? Html.Label("Active") : Html.Label("In-Active"))</text>);
                        column.Bound(s => s.Description);
                        column.Bound(s => s.SetByPerson);
                        column.Bound(s => s.SetOn);
                        column.Bound(s => s.ModuleID).Title("Action").Template(@<text><a class="btn-link">Edit</a> | <a class="btn-link-delete">Delete</a></text>);
                    })
                    .Selectable()
                    .Pageable(pages => pages.PageSize(10))
                    .Scrollable(scroll => scroll.Height(200))
                    .Sortable()
                    .Footer(true)
                )
                <div style="clear: both; margin-bottom: 15px;"></div>
            </div>
        </div>
    </div>
</div>

<div id="myModal" class="modal fade">
    @Html.Partial("_ConfirmationView")
</div>

<script type="text/javascript">

    $(document).ready(function () {
        $("#hdnIsInsert").val(true);
    });

    function validatedModule() {
       
        if ($('#Module_ApplicationID').val() == "") {
            showMessage('Application is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#Module_Title').val() == "") {
            showMessage('Title is required.', 'warning', 'Warning!');
            return false;
        }
        else if ($('#Module_Description').val() == "") {
            showMessage('Description is required.', 'warning', 'Warning!');
            return false;
        }
        return true;
    }


    $('#btnSave').click(function () {

        if (validatedModule()) {
            var jsonObject = {
                "ModuleID": $('#Module_ModuleID').val(),
                "ApplicationID": $('#Module_ApplicationID').val(),
                "Title": $('#Module_Title').val(),
                "Description": $('#Module_Description').val(),
                "IsActive": $('#Module_IsActive').prop("checked"),
            };

            var trNew = "";

            $.ajax({
                type: "POST",
                url: '@Url.Action("Save", "Module")',
                data: JSON.stringify({ module: jsonObject, isInsert: $("#hdnIsInsert").val() }),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                cache: false,
                success: function (data) {
                    trNew = "<tr>";
                    trNew = trNew + "<td style='display:none'><input id='" + data.ModuleID + "' type='hidden' value='" + data.ModuleID + "'></td>";
                    trNew = trNew + "<td>" + data.ModuleID + "</td>";
                    trNew = trNew + "<td>" + data.Title + "</td>";
                    trNew = trNew + "<td style='display:none'>" + data.ApplicationID + "</td>";
                    trNew = trNew + "<td>" + data.ApplicationName + "</td>";
                    trNew = trNew + "<td>" + "<label for=\"\">";
                    if (data.IsActive == true) {
                        trNew = trNew + "Active";
                    } else {
                        trNew = trNew + "In-Active";
                    }
                    trNew = trNew + "<td>" + data.Description + "</td>";
                    trNew = trNew + "<td>" + data.SetByPerson + "</td>";
                    trNew = trNew + "<td>" + data.SetOn + "</td>";
                    trNew = trNew + "<td>" + "<a class=\"btn-link\"> Edit </a> | <a class=\"btn-link-delete\"> Delete </a></td>";
                    trNew = trNew + " </tr>";

                    if ($("#hdnIsInsert").val() == "true") {
                        $("#gvModuleList .t-grid-content tbody").prepend(trNew);
                    } else {
                        var tr = $('#' + data.ModuleID).parent().parent();
                        tr.replaceWith(trNew);
                    }
                    showMessage('Saved successfully.', 'success', 'Success!');
                    clearModuleData();
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
        }
    });

    $('#gvModuleList').delegate('a.btn-link', 'click', function () {
        var id = $(this).parent().parent().find("td:eq(1)").text();
        editModuleData(id.trim());
    });

    $('#gvModuleList').delegate('a.btn-link-delete', 'click', function () {
        var id = $(this).parent().parent().find("td:eq(1)").text();
        $('#commonIdForDelete').val(id);
        $('#myModal').modal('show');
    });

    function editModuleData(id) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetModule", "Module")',
            data: { id: id },
            cache: false,
            success: function (data) {
                $('#Module_ModuleID').val(data.ModuleID);
                $("#Module_ApplicationID option:contains(" + data.ApplicationName + ")").attr('selected', 'selected');
                $('#Module_Title').val(data.Title);
                $('#Module_Description').val(data.Description);
                $('#Module_IsActive').prop("checked", data.IsActive);
                $("#hdnIsInsert").val(false);
            },
            error: function () {
                showMessage('Connection error.', 'error', 'Error!');
            }
        });
    }

    function deleteItem(id) {
        id = id.trim();
            $.ajax({
                type: "POST",
                url: '@Url.Action("Delete", "Module")',
                data: { id: id },
                cache: false,
                success: function () {
                    var tr = $('#' + id).parent().parent();
                    tr.remove();
                    $("#myModal").modal('hide');
                    showMessage('Deleted successfully.', 'success', 'Success!');
                },
                error: function () {
                    showMessage('Connection error.', 'error', 'Error!');
                }
            });
    }

    function clearModuleData() {
        $('#Module_ModuleID').val("");
        $('#Module_ApplicationID').val("");
        $('#Module_Title').val("");
        $('#Module_Description').val("");
        $('#Module_IsActive').prop("checked", false);
        $("#hdnIsInsert").val(true);
    }
    function showMessage(message, priority, title) {
        $('#message').html("");
        $(document).trigger("add-alerts", [
          {
              'message': message,
              'priority': priority,
              'title': title
          }
        ]);
    }
</script>
<script src="~/Scripts/jquery.bsAlerts.js"></script>